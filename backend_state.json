{
  "state": "done",
  "repo": "QDL123/periplus",
  "branch": "main",
  "repo_background": "# Welcome to Periplus! ðŸŽ‰\n\nCongratulations on your decision to contribute to Periplus! It's fantastic that you're interested in being part of this open-source project. Your enthusiasm and willingness to contribute are greatly appreciated by the entire Periplus community.\n\n## Introduction to Periplus\n\nPeriplus is an exciting project that aims to provide a powerful and efficient solution for vector search and similarity matching. It's designed to handle large-scale datasets and offer fast, accurate results for various applications such as recommendation systems, image similarity search, and more.\n\nThe project is structured into several key components:\n\n1. Periplus Server: The core C++ implementation of the vector search engine.\n2. Periplus Client Library: A Python client for interacting with the Periplus server.\n3. Periplus Proxy: A Python-based proxy for additional functionality and integration.\n\n## Getting Started\n\nBefore you dive into contributing, here are some important things to know:\n\n1. **Code of Conduct**: Periplus has a Code of Conduct that all contributors are expected to follow. It ensures a positive and inclusive environment for everyone involved in the project.\n\n2. **Contributing Guidelines**: The project has detailed contributing guidelines that outline the process for making contributions, from reporting bugs to submitting new features.\n\n3. **Development Setup**: Depending on which part of the project you want to contribute to (server, client library, or proxy), there are different setup instructions you'll need to follow.\n\n4. **Testing**: The project emphasizes the importance of testing, including unit tests and end-to-end (e2e) tests.\n\n5. **Commit Message Guidelines**: There are specific guidelines for writing commit messages to maintain consistency across the project.\n\n## Next Steps\n\nAre you ready to find your first issue to work on? If so, here's what you can do:\n\n1. Familiarize yourself with the project structure and documentation.\n2. Set up your development environment following the instructions in the CONTRIBUTING.md file.\n3. Look through the existing issues on the GitHub repository to find something that interests you or matches your skills.\n4. If you don't find a suitable issue, you can also suggest enhancements or report bugs following the guidelines in the CONTRIBUTING.md file.\n\nRemember, no contribution is too small, and the Periplus community values all forms of input, from code contributions to documentation improvements and bug reports.\n\nAre you ready to start looking for your first issue to work on?",
  "top_issues": [
    {
      "id": 2521310308,
      "markdown": "## Add Unit Tests for args.cpp (#12)\n\nThis issue is an excellent choice for a new contributor because:\n\n1. It involves writing unit tests, which is a great way to familiarize oneself with the codebase without modifying core functionality.\n2. The task is well-defined and has clear guidelines (use Catch2 framework, follow existing examples).\n3. It covers a specific file (args.cpp), making the scope manageable.\n4. Unit testing is a valuable skill for any developer to practice.\n5. The issue provides context on what needs to be tested (interfaces for classes parsing command arguments).\n\nThis task will help the new contributor understand the project's structure and testing practices while making a meaningful contribution."
    },
    {
      "id": 2521315621,
      "markdown": "## Update number of IVF cells calculation for small datasets (#13)\n\nThis issue is a good option for a new contributor because:\n\n1. It addresses a specific function (determineNCells in cache.cpp), providing a clear focus.\n2. The problem is well-described, making it easier to understand the task at hand.\n3. It involves optimizing an existing function, which is a common and valuable task in software development.\n4. The issue doesn't require extensive knowledge of the entire codebase.\n5. It provides an opportunity to learn about performance considerations in the project.\n\nWhile this task may require some understanding of the IVF (Inverted File) algorithm, it's still approachable for a newcomer and offers a chance to make a meaningful impact on the project's performance."
    }
  ],
  "selected_issue": {
    "id": 2521315621,
    "markdown": "## Update number of IVF cells calculation for small datasets (#13)\n\nThis issue is a good option for a new contributor because:\n\n1. It addresses a specific function (determineNCells in cache.cpp), providing a clear focus.\n2. The problem is well-described, making it easier to understand the task at hand.\n3. It involves optimizing an existing function, which is a common and valuable task in software development.\n4. The issue doesn't require extensive knowledge of the entire codebase.\n5. It provides an opportunity to learn about performance considerations in the project.\n\nWhile this task may require some understanding of the IVF (Inverted File) algorithm, it's still approachable for a newcomer and offers a chance to make a meaningful impact on the project's performance."
  },
  "issue_instructions": "# Update number of IVF cells calculation for small datasets (Issue #13)\n\nWelcome to your first contribution to Periplus! This issue focuses on improving the `determineNCells` function in `cache.cpp` to better handle small datasets. Let's guide you through the process of addressing this issue.\n\n## Getting Started\n\n1. First, please read the [CONTRIBUTING.md](/CONTRIBUTING.md) file to familiarize yourself with the project's contribution guidelines.\n\n2. Review the [README.md](/README.md) to get an overview of the project and its setup instructions.\n\n3. Set up your development environment as described in the \"Your First Code Contribution\" section of the CONTRIBUTING.md file.\n\n## Addressing the Issue\n\n1. Locate the `determineNCells` function in the [/src/cache.cpp](/src/cache.cpp) file. It should look like this:\n\n```cpp\nsize_t Cache::determineNCells(size_t nTotal) {\n    // TODO: modify this to account for low total\n    return 4 * sqrt(nTotal);\n}\n```\n\n2. The current implementation doesn't handle small datasets well. Your task is to modify this function to provide a more appropriate number of IVF cells for small datasets.\n\n3. Consider the following approach:\n   - Implement a minimum threshold for the number of cells.\n   - Use a logarithmic or piecewise function to determine the number of cells for small datasets.\n   - Ensure the function still works well for larger datasets.\n\n4. Here's a possible implementation to get you started:\n\n```cpp\nsize_t Cache::determineNCells(size_t nTotal) {\n    const size_t MIN_CELLS = 10;  // Minimum number of cells\n    const size_t SMALL_DATASET_THRESHOLD = 1000;  // Threshold for small datasets\n\n    if (nTotal <= SMALL_DATASET_THRESHOLD) {\n        // Logarithmic scaling for small datasets\n        return std::max(MIN_CELLS, static_cast<size_t>(std::log2(nTotal) * 2));\n    } else {\n        // Original calculation for larger datasets\n        return 4 * std::sqrt(nTotal);\n    }\n}\n```\n\n5. After implementing your solution, make sure to test it with various dataset sizes to ensure it behaves correctly.\n\n## Submitting Your Contribution\n\n1. Create a new branch for your changes: `git checkout -b fix/determine-ncells-small-datasets`\n\n2. Make your changes in the `src/cache.cpp` file.\n\n3. Commit your changes with a descriptive message:\n   ```\n   git commit -m \"fix: Improve determineNCells function for small datasets\"\n   ```\n\n4. Push your changes to your fork: `git push origin fix/determine-ncells-small-datasets`\n\n5. Create a Pull Request (PR) on GitHub, describing the changes you've made and referencing the original issue (#13).\n\n6. Wait for feedback from the maintainers and be prepared to make any requested changes.\n\nRemember, don't hesitate to ask questions if you're unsure about anything. Good luck with your first contribution to Periplus!"
}