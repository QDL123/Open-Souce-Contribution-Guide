{
  "state": "done",
  "repo": "QDL123/Periplus",
  "repo_background": "Congratulations on your decision to contribute to the Periplus project! It's wonderful to see developers like you taking the initiative to get involved in open source. Periplus is an exciting project, and your contribution will be valuable to its growth and development.\n\nLet me introduce you to Periplus and guide you through the contribution process:\n\nPeriplus is a project that appears to be focused on providing a robust and efficient system for data storage and retrieval. While I don't have specific details about its full functionality, it seems to involve server-side components, a Python client library, and a proxy system.\n\nThe project is set up with several key components:\n1. Periplus Server: Written in C++, using libraries like FAISS, cURL, and RapidJSON.\n2. Periplus Client Library: A Python library for interacting with the server.\n3. Periplus Proxy: Another Python component, likely for managing connections or data flow.\n\nTo contribute to Periplus, you'll need to follow these general steps:\n\n1. Familiarize yourself with the project's Code of Conduct. Periplus values a respectful and inclusive community.\n\n2. Set up your development environment. This includes forking the repository, cloning it to your local machine, and setting up the necessary tools and dependencies.\n\n3. Choose an area to contribute. This could be the server, client library, proxy, or documentation.\n\n4. Before making changes, make sure to create a new branch for your work.\n\n5. Make your changes, following the project's coding standards and guidelines.\n\n6. Run tests to ensure your changes don't break existing functionality.\n\n7. Commit your changes with a clear and descriptive commit message.\n\n8. Push your changes to your fork and create a pull request.\n\n9. Be prepared to discuss your changes and potentially make revisions based on feedback from the maintainers.\n\nThe project maintainers have provided detailed instructions in the CONTRIBUTING.md file, which I highly recommend you read thoroughly. It contains specific setup instructions for each component of the project.\n\nAre you ready to find your first issue to work on? If so, we can look at the project's issue tracker to find a suitable task for a first-time contributor. If you have any specific areas of interest or expertise, please let me know, and I can help guide you towards relevant issues.",
  "top_issues": [
    {
      "id": 2521310308,
      "title": "Add Unit Tests for args.cpp",
      "number": "12",
      "body": "Right now there are no unit tests for args.cpp. Unit tests are needed to make sure the interfaces for all the classes responsible for parsing the command arguments coming from the client are maintained. Use the Catch2 framework and follow the example set by the core unit tests. Make sure each function of each class is thoroughly tested such that any changes to the implementation which could effect the interface are caught.",
      "reasoning": "This issue is ideal for a new contributor because it involves writing unit tests, which is a great way to familiarize oneself with the codebase without modifying core functionality. The task is well-defined, uses a specific framework (Catch2), and has existing examples to follow. It's a contained task that doesn't require deep knowledge of the project's internals."
    },
    {
      "id": 2521315621,
      "title": "Update number of IVF cells calculation for small datasets",
      "number": "13",
      "body": "The determineNCells function in cache.cpp is currently only designed to work well for large datasets. In cases where the dataset is small too many cells are created for optimal performance. There needs to be a balance so that no matter the size of the dataset the number of IVF cells makes sense.",
      "reasoning": "This issue involves optimizing a specific function for small datasets, which is a well-scoped task. It requires some understanding of the existing code, but is focused on a single function. This makes it manageable for a new contributor while still providing a meaningful impact on the project's performance."
    }
  ],
  "selected_issue": {
    "id": 2521310308,
    "title": "Add Unit Tests for args.cpp",
    "number": "12",
    "body": "Right now there are no unit tests for args.cpp. Unit tests are needed to make sure the interfaces for all the classes responsible for parsing the command arguments coming from the client are maintained. Use the Catch2 framework and follow the example set by the core unit tests. Make sure each function of each class is thoroughly tested such that any changes to the implementation which could effect the interface are caught.",
    "reasoning": "This issue is ideal for a new contributor because it involves writing unit tests, which is a great way to familiarize oneself with the codebase without modifying core functionality. The task is well-defined, uses a specific framework (Catch2), and has existing examples to follow. It's a contained task that doesn't require deep knowledge of the project's internals."
  },
  "issue_instructions": "# Add Unit Tests for args.cpp (Issue #12)\n\n[Link to Issue #12](https://github.com/qdl123/periplus/issues/12)\n\nSummary: Create unit tests for the `args.cpp` file using the Catch2 framework, following the example set by existing core unit tests.\n\nHello and welcome to the Periplus project! We're excited to have you contribute. Here's a step-by-step guide to help you address this issue:\n\n1. **Set up your development environment**\n   - Fork and clone the repository:\n     ```bash\n     git clone https://github.com/your-username/Periplus.git\n     cd Periplus\n     ```\n   - Install dependencies:\n     ```bash\n     brew install faiss curl cpr rapidjson libomp catch2 cmake\n     ```\n   - Build the project:\n     ```bash\n     cmake -S . -B build\n     cmake --build build\n     ```\n\n2. **Create a new branch**\n   ```bash\n   git checkout -b test/args-cpp-unit-tests\n   ```\n\n3. **Create a new test file**\n   - Create a new file `test_args.cpp` in the `/test/unit/` directory.\n   - Add the following boilerplate code:\n     ```cpp\n     #define CATCH_CONFIG_MAIN\n     #include <catch2/catch_test_macros.hpp>\n     #include \"../../src/args.h\"\n     ```\n\n4. **Write unit tests**\n   - Refer to `/test/unit/test_core.cpp` for examples of how to structure your tests.\n   - For each class in `args.cpp` (InitializeArgs, TrainArgs, LoadArgs, SearchArgs, EvictArgs, AddArgs), create test cases that cover all methods.\n   - Example test case structure:\n     ```cpp\n     TEST_CASE(\"InitializeArgs deserialization\", \"[Args]\") {\n         // Setup\n         std::stringstream ss;\n         // ... populate ss with test data\n\n         InitializeArgs args;\n         \n         // Test static deserialization\n         args.deserialize_static(ss);\n         REQUIRE(args.d == expected_d);\n         // ... more assertions\n\n         // Test dynamic deserialization\n         args.deserialize_dynamic(ss);\n         REQUIRE(args.db_url != nullptr);\n         // ... more assertions\n     }\n     ```\n\n5. **Run your tests**\n   - Rebuild the project:\n     ```bash\n     cmake --build build\n     ```\n   - Run the tests:\n     ```bash\n     ./build/tests\n     ```\n\n6. **Commit your changes**\n   - Stage your changes:\n     ```bash\n     git add test/unit/test_args.cpp\n     ```\n   - Commit with a descriptive message:\n     ```bash\n     git commit -m \"test: Add unit tests for args.cpp\"\n     ```\n\n7. **Push your changes and create a Pull Request**\n   ```bash\n   git push origin test/args-cpp-unit-tests\n   ```\n   - Go to the GitHub repository and create a new Pull Request from your branch.\n\nRemember to follow the project's [Code of Conduct](https://github.com/qdl123/periplus/blob/main/CODE_OF_CONDUCT.md) and [Contribution Guidelines](https://github.com/qdl123/periplus/blob/main/CONTRIBUTING.md). If you have any questions, don't hesitate to ask in the issue comments.\n\nGood luck with your contribution!"
}